// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: link.sql

package db

import (
	"context"
)

const createShortLink = `-- name: CreateShortLink :one
INSERT INTO links (id, user_id, original_url, short_url_id, pretty_id) VALUES (?, ?, ?, ?, ?) RETURNING id, user_id, original_url, short_url_id, pretty_id, updated_at, created_at
`

type CreateShortLinkParams struct {
	ID          string
	UserID      string
	OriginalUrl string
	ShortUrlID  string
	PrettyID    string
}

func (q *Queries) CreateShortLink(ctx context.Context, arg CreateShortLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createShortLink,
		arg.ID,
		arg.UserID,
		arg.OriginalUrl,
		arg.ShortUrlID,
		arg.PrettyID,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortUrlID,
		&i.PrettyID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteShortLink = `-- name: DeleteShortLink :exec
DELETE FROM links WHERE user_id = ? AND id = ?
`

type DeleteShortLinkParams struct {
	UserID string
	ID     string
}

func (q *Queries) DeleteShortLink(ctx context.Context, arg DeleteShortLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteShortLink, arg.UserID, arg.ID)
	return err
}

const getShortLinkById = `-- name: GetShortLinkById :one
SELECT id, user_id, original_url, short_url_id, pretty_id, updated_at, created_at FROM links WHERE user_id = ? AND id = ? LIMIT 1
`

type GetShortLinkByIdParams struct {
	UserID string
	ID     string
}

func (q *Queries) GetShortLinkById(ctx context.Context, arg GetShortLinkByIdParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, getShortLinkById, arg.UserID, arg.ID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortUrlID,
		&i.PrettyID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShortLinkByShortUrlId = `-- name: GetShortLinkByShortUrlId :one
SELECT id, user_id, original_url, short_url_id, pretty_id, updated_at, created_at FROM links WHERE user_id = ? AND short_url_id = ? LIMIT 1
`

type GetShortLinkByShortUrlIdParams struct {
	UserID     string
	ShortUrlID string
}

func (q *Queries) GetShortLinkByShortUrlId(ctx context.Context, arg GetShortLinkByShortUrlIdParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, getShortLinkByShortUrlId, arg.UserID, arg.ShortUrlID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortUrlID,
		&i.PrettyID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShortLinks = `-- name: GetShortLinks :many
SELECT id, user_id, original_url, short_url_id, pretty_id, updated_at, created_at FROM links WHERE user_id = ?
`

func (q *Queries) GetShortLinks(ctx context.Context, userID string) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getShortLinks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalUrl,
			&i.ShortUrlID,
			&i.PrettyID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const prettifyShortLink = `-- name: PrettifyShortLink :one
UPDATE links SET pretty_id = ? WHERE id = ? AND user_id = ? RETURNING id, user_id, original_url, short_url_id, pretty_id, updated_at, created_at
`

type PrettifyShortLinkParams struct {
	PrettyID string
	ID       string
	UserID   string
}

func (q *Queries) PrettifyShortLink(ctx context.Context, arg PrettifyShortLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, prettifyShortLink, arg.PrettyID, arg.ID, arg.UserID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortUrlID,
		&i.PrettyID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
